// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id          String   @id @default(uuid())
  title       String
  developer   String?  @db.VarChar(100)
  editor      String?  @db.VarChar(100)
  releaseDate Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  link        String   @db.VarChar(255)
  description String?  @db.Text
  highlighted Boolean? @default(false)
  genre       Genre    @relation(fields: [genreId], references: [id])
  genreId     String
  videos      Video[]
  images      Image[]
}

model Video {
  id        String   @id @default(uuid())
  link      String
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  source    String
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id   String @id @default(uuid())
  name String
  Game Game[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id          String    @id @default(cuid())
  name        String?
  lastname    String?
  pseudo      String    @unique @db.VarChar(80)
  email       String    @unique @db.VarChar(120)
  isActivated Boolean?  @default(false)
  password    String
  image       String?
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  accounts    Account[]
  sessions    Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
